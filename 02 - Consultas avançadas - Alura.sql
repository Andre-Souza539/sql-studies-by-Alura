/*
    Consultas Avançadas em SQL - PROJETO by ALURA!
    
*/


/* 1- Seleção das 3 tabelas principais do nosso projeto */
SELECT * FROM TABELA_DE_CLIENTES;
SELECT * FROM TABELA_DE_VENDEDORES;
SELECT * FROM TABELA_DE_PRODUTOS;


/* 2- Consulta Com Condicionais Lógica E e OU*/
SELECT * FROM TABELA_DE_PRODUTOS WHERE SABOR = 'Manga' AND TAMANHO = '470 ml';
SELECT * FROM TABELA_DE_PRODUTOS WHERE SABOR = 'Manga' OR TAMANHO = '470 ml';
SELECT * FROM TABELA_DE_PRODUTOS WHERE SABOR = 'Laranja' AND EMBALAGEM = 'PET';
SELECT * FROM TABELA_DE_PRODUTOS WHERE SABOR = 'Laranja' OR EMBALAGEM = 'PET';

/* Invertendo Resultados LÓGICOS */ 

SELECT * FROM TABELA_DE_PRODUTOS WHERE NOT (SABOR = 'Manga' AND TAMANHO = '470 ml');
SELECT * FROM TABELA_DE_PRODUTOS WHERE NOT (SABOR = 'Manga' OR TAMANHO = '470 ml');
SELECT * FROM TABELA_DE_PRODUTOS WHERE NOT (SABOR = 'Laranja' AND EMBALAGEM = 'PET');
SELECT * FROM TABELA_DE_PRODUTOS WHERE NOT (SABOR = 'Laranja' OR EMBALAGEM = 'PET');

/* 3 combinando expressões lógicas */

SELECT * FROM TABELA_DE_PRODUTOS WHERE (SABOR = 'Manga' AND NOT ( TAMANHO = '470 ml')); 
SELECT * FROM TABELA_DE_PRODUTOS WHERE (SABOR = 'Laranja' AND NOT ( EMBALAGEM = 'PET'));

/* EXPRESSÕES QUE PODEM SUBISTITUI O OR */ 

SELECT * FROM TABELA_DE_PRODUTOS WHERE SABOR = 'Laranja' or SABOR = 'Manga';
SELECT * FROM TABELA_DE_PRODUTOS WHERE SABOR IN ('Laranja','Manga');

/* 4- RETORNA TODOS OS REGISTROS DA TABELA CLIENTE QUE MORAM EM RIO DE JANEIRO OU SÃO PAULO E A 
IDADE É MAIOR OU IGUAL A 20 ANOS */

SELECT * FROM TABELA_DE_CLIENTES WHERE CIDADE IN ('Rio de Janeiro','Sao Paulo') AND IDADE >= 20;

/* RETORNA TODOS OS REGISTROS DA TABELA_DE_CLIENTES ONDE A CIDADE É RIO DE JANEIRO OU SÃO PAULO
E A IDADE É MAIOR OU IGUAL A VINTE E MENOR IGUAL A VINTE DOIS */
SELECT * FROM TABELA_DE_CLIENTES WHERE CIDADE IN ('Rio de Janeiro','Sao Paulo') AND (IDADE >= 20 AND IDADE <= 22);
SELECT * FROM TABELA_DE_CLIENTES WHERE CIDADE IN ('Rio de Janeiro','São Paulo') AND (IDADE >= 23 AND IDADE <= 25);

/* RETORNA TODOS OS REGISTROS DA TABELA DE PRODUTOS ONDE O SABOR CONTENHA PELO MENOS EM ALGUMA 
PARTE DE SUA STRING A PARTE DESTACADA */ 
SELECT * FROM TABELA_DE_PRODUTOS WHERE SABOR LIKE '%Maca%';
SELECT * FROM TABELA_DE_PRODUTOS WHERE SABOR LIKE '%Lima%';

/* COMBINANDO RESULTADOO COM UMA OPERAÇÃO LÓGICA */
SELECT * FROM TABELA_DE_PRODUTOS WHERE SABOR LIKE '%Maca%' AND EMBALAGEM = 'PET';
SELECT * FROM TABELA_DE_PRODUTOS WHERE SABOR LIKE '%Lima%' AND NOT (EMBALAGEM = 'PET');


/* 5 CASE */ 
/* SELECIONA 2 REGISTROS DA TABELA_DE_PRODUTOS E COM BASE NOS PREÇOS DE CADA ITEM QUE EU APRESENTE 
RETORNA 3 MENSAGENS EM UM STATUS PERSONALIZADO NA EXECUÇÃO DO CÓDIGO */
SELECT NOME_DO_PRODUTO, PRECO_DE_LISTA, (
CASE WHEN PRECO_DE_LISTA >= 12 THEN 'PRODUTO CARO'
     WHEN PRECO_DE_lISTA >= 7 AND PRECO_DE_LISTA < 12 THEN 'PRODUTO EM CONTA'
     ELSE 'PRODUTO BARATO'
END) AS STATUS_PRECO FROM TABELA_DE_PRODUTOS WHERE SABOR = 'Manga';

/* RETORNA NÃO SO AS MENSAGENS SOBRE O PREÇO COMO TAMBÉM FAZ O CÁLCULO COM A MÉDIA DOS VALORES*/
SELECT EMBALAGEM, (
CASE WHEN PRECO_DE_LISTA >= 12 THEN 'PRODUTO CARO'
     WHEN PRECO_DE_lISTA >= 7 AND PRECO_DE_LISTA < 12 THEN 'PRODUTO EM CONTA'
     ELSE 'PRODUTO BARATO'
END) AS STATUS_PRECO, 
AVG(PRECO_DE_LISTA) AS MEDIA_PRECO
FROM TABELA_DE_PRODUTOS 
GROUP BY EMBALAGEM,(
CASE WHEN PRECO_DE_LISTA >= 12 THEN 'PRODUTO CARO'
     WHEN PRECO_DE_lISTA >= 7 AND PRECO_DE_LISTA < 12 THEN 'PRODUTO EM CONTA'
     ELSE 'PRODUTO BARATO'
END);



/* DISTINCT - AGRUPA OS CONTEÚDOS QUE SE REPETEM TRAZENDO SOMENTE 1 VEZ CADA REGISTRO REPETIDO*/
SELECT EMBALAGEM FROM TABELA_DE_PRODUTOS;
SELECT DISTINCT EMBALAGEM FROM TABELA_DE_PRODUTOS;
SELECT DISTINCT SABOR FROM TABELA_DE_PRODUTOS;
SELECT DISTINCT SABOR FROM TABELA_DE_PRODUTOS WHERE SABOR = 'Laranja';
/* USANDO COM 2 COLUNAS AO INVÉS DE 1 */
SELECT DISTINCT EMBALAGEM, SABOR FROM TABELA_DE_PRODUTOS;

/* GROUP BY */

/* SELECIONA A SOMA DE LIMITE DE CRÉDITO COM O ALIAS TOTAL CRÉDITO DA TABELA_DE_CLIENTES E 
AGRUPA POR ESTADO*/
SELECT ESTADO, SUM(LIMITE_DE_CREDITO) AS TOTAL_CREDITO FROM TABELA_DE_CLIENTES GROUP BY ESTADO;

/* SELECIONA A COLUNA EMBALAGEM, E PEGA O MAIOR PREÇO DA LISTA E COLOCA UM ALIAS DE MAIOR_PREÇO DA
TABELA_DE_PRODUTOS E AGRUPA TUDO PELA EMBALAGEM*/
SELECT EMBALAGEM, MAX(PRECO_DE_LISTA) AS MAIOR_PRECO FROM TABELA_DE_PRODUTOS GROUP BY EMBALAGEM;

/* LISTA A QUANTIDADE DE PRODUTOS COM CADA EMBALAGEM DA DA TABELA DE PRODUTOS, AGRUPANDO
POR EMBALAGEM*/
SELECT EMBALAGEM, COUNT(*) AS NUMERO_PRODUTOS FROM TABELA_DE_PRODUTOS GROUP BY EMBALAGEM;

/* LISTA A SOMA DE LIMITE_DECRÉDITO COMO TOTAL_CRÉDITO DA TABELA_DE_CLIENTES E AGRUPA POR BAIRRO */
SELECT BAIRRO, SUM(LIMITE_DE_CREDITO) AS TOTAL_CREDITO FROM TABELA_DE_CLIENTES GROUP BY BAIRRO;

/* LISTA A SOMA DE LIMITE_DE_CRÉDITO COMO TOTAL_CRÉDITO DA TABELA DE CLIENTES ONDE A CIDADE É
RIO DE JANEIRO E AGRUPA TUDO POR BAIRRO*/
SELECT BAIRRO, SUM(LIMITE_DE_CREDITO) AS TOTAL_CREDITO FROM TABELA_DE_CLIENTES 
WHERE CIDADE = 'Rio de Janeiro' GROUP BY BAIRRO;

/*LISTA O ESTADO, BAIRRO E A SOMA DE LIMITE DE CRÉDITO DA TABELA DE CLIENTES E AGRUPA
TUDO POR ESTADO,BAIRRO E ORDENA ALFABETICAMENTE O ESTADO E O BAIRRO*/
SELECT ESTADO, BAIRRO, SUM(LIMITE_DE_CREDITO) AS TOTAL_CREDITO 
FROM TABELA_DE_CLIENTES GROUP BY ESTADO, BAIRRO ORDER BY ESTADO, BAIRRO;

/* HAVING */

/* LISTA O ESTADO, CUJO A SOMA DE LIMITE DE CRÉDITO DA TABELA DE CLIENTES ULTRAPASSA OS 900000 */
SELECT ESTADO, SUM(LIMITE_DE_CREDITO) AS SOMA_LIMITE
FROM TABELA_DE_CLIENTES 
GROUP BY ESTADO
HAVING SUM(LIMITE_DE_CREDITO) >= 900000;

/* LISTA AS EMBALAGENS COM A SOMA DO MAIOR PREÇO E MENOR PREÇO DENTRO DA TABELA SOMA DE PRODUTOS 
    ONDE A SOMA DO PREÇO_DE LISTA SEJA MENOR OU IGUAL A 80*/
SELECT EMBALAGEM, MAX(PRECO_DE_LISTA) AS MAIOR_PRECO,
MIN(PRECO_DE_LISTA) AS MENOR_PRECO FROM TABELA_DE_PRODUTOS
GROUP BY EMBALAGEM
HAVING SUM(PRECO_DE_LISTA) <= 80;


/* ROWNUM NÚMERO DA LINHA*/
/* SELECIONA O NÚMERO DA LINHA, CÓDIGO DE PRODUTO E NOME DO PRODUTO DA TABELA DE PRODUTOS */
SELECT ROWNUM, CODIGO_DO_PRODUTO, NOME_DO_PRODUTO FROM TABELA_DE_PRODUTOS;

/* SELECIONA AS LINHAS COM O CÓDIGO DE PRODUTO E NOME DE PRODUTO DA TABELA DE PRODUTOS
ONDE O NÚMERO DA LINHA É MENOR OU IGUAL A 5 */
SELECT ROWNUM, CODIGO_DO_PRODUTO, NOME_DO_PRODUTO FROM TABELA_DE_PRODUTOS
WHERE ROWNUM <= 5;

/* SELECIONA AS LINHAS COM CÓDIGO DE PRODUTO E NOME DE PRODUTO DA TABELA DE PRODUTOS ONDE 
A LINHA É MENOR QUE 10*/
SELECT ROWNUM, CODIGO_DO_PRODUTO, NOME_DO_PRODUTO FROM TABELA_DE_PRODUTOS
WHERE ROWNUM < 10;

/* ORDER BY */
/*LISTA TODOS OS REGISTROS DA TABELA DE PRODUTOS E ORDENA PELO PREÇO DA LISTA*/
SELECT * FROM TABELA_DE_PRODUTOS ORDER BY PRECO_DE_LISTA;

/*LISTA TODOS OS REGISTROS DA TABELA DE PRODUTOS E ORDENA PELO PREÇO DA LISTA DE FORMA DECRESCENTE*/
SELECT * FROM TABELA_DE_PRODUTOS ORDER BY PRECO_DE_LISTA DESC;

/*LISTA TODOS OS REGISTROS DA TABELA DE PRODUTOS E ORDENA PELO NOME DO PRODUTO*/
SELECT * FROM TABELA_DE_PRODUTOS ORDER BY NOME_DO_PRODUTO;


/*LISTA TODOS OS REGISTROS DA TABELA DE PRODUTOS E ORDENA PELO NOME DO PRODUTO DE MANEIRA ASCENDENTE
E A EMBALAGEM DE FORMA DECRESCENTE*/
SELECT * FROM TABELA_DE_PRODUTOS ORDER BY EMBALAGEM DESC , NOME_DO_PRODUTO ASC;

/* JOIN */
/* JUNTA OS DADOS DE NOME DO VENDEDOR E BAIRRO DO VENDEDOR COM NOME CLIENTE COM BAIRRO CLIENTE
   RELACIONADO COM BASE NO BAIRRO EM QUE OS 2 RESIDEM
*/
SELECT TABELA_DE_VENDEDORES.NOME AS NOME_VENDEDOR, 
       TABELA_DE_VENDEDORES.BAIRRO AS BAIRRO_VENDEDOR, 
       TABELA_DE_CLIENTES.NOME AS NOME_CLIENTE, 
       TABELA_DE_CLIENTES.BAIRRO AS BAIRRO_CLIENTE
FROM TABELA_DE_VENDEDORES
INNER JOIN TABELA_DE_CLIENTES
ON TABELA_DE_VENDEDORES.BAIRRO = TABELA_DE_CLIENTES.BAIRRO;

SELECT  TABELA_DE_VENDEDORES.NOME AS NOME_VENDEDOR, 
        TABELA_DE_VENDEDORES.BAIRRO AS BAIRRO_VENDEDOR, 
        TABELA_DE_CLIENTES.NOME AS NOME_CLIENTE,    
        TABELA_DE_CLIENTES.BAIRRO AS BAIRRO_CLIENTE
FROM TABELA_DE_VENDEDORES
LEFT JOIN TABELA_DE_CLIENTES
ON TABELA_DE_VENDEDORES.BAIRRO = TABELA_DE_CLIENTES.BAIRRO;

SELECT  TABELA_DE_VENDEDORES.NOME AS NOME_VENDEDOR, 
        TABELA_DE_VENDEDORES.BAIRRO AS BAIRRO_VENDEDOR, 
        TABELA_DE_CLIENTES.NOME AS NOME_CLIENTE, 
        TABELA_DE_CLIENTES.BAIRRO AS BAIRRO_CLIENTE
FROM TABELA_DE_VENDEDORES
RIGHT JOIN TABELA_DE_CLIENTES
ON TABELA_DE_VENDEDORES.BAIRRO = TABELA_DE_CLIENTES.BAIRRO;

SELECT TABELA_DE_VENDEDORES.NOME AS NOME_VENDEDOR, 
       TABELA_DE_VENDEDORES.BAIRRO AS BAIRRO_VENDEDOR, 
       TABELA_DE_CLIENTES.NOME AS NOME_CLIENTE, 
       TABELA_DE_CLIENTES.BAIRRO AS BAIRRO_CLIENTE
FROM TABELA_DE_VENDEDORES
FULL JOIN TABELA_DE_CLIENTES
ON TABELA_DE_VENDEDORES.BAIRRO = TABELA_DE_CLIENTES.BAIRRO;

SELECT TABELA_DE_VENDEDORES.NOME AS NOME_VENDEDOR, 
       TABELA_DE_VENDEDORES.BAIRRO AS BAIRRO_VENDEDOR, 
       TABELA_DE_CLIENTES.NOME AS NOME_CLIENTE,
       TABELA_DE_CLIENTES.BAIRRO AS BAIRRO_CLIENTE
FROM TABELA_DE_VENDEDORES,  TABELA_DE_CLIENTES;


/* SUB CONSULTAS  */
SELECT DISTINCT BAIRRO FROM TABELA_DE_VENDEDORES;

SELECT * FROM TABELA_DE_CLIENTES WHERE BAIRRO
IN ('Tijuca','Santo Amaro','Jardins','Copacabana','ASASAS');

SELECT * FROM TABELA_DE_CLIENTES WHERE BAIRRO
IN (SELECT DISTINCT BAIRRO FROM TABELA_DE_VENDEDORES);

SELECT EMBALAGEM, SUM(PRECO_DE_LISTA) AS SOMA_PRECO
FROM TABELA_DE_PRODUTOS GROUP BY EMBALAGEM
HAVING SUM(PRECO_DE_LISTA) <= 80;

SELECT Z.EMBALAGEM, Z.SOMA_PRECO FROM
(SELECT EMBALAGEM, SUM(PRECO_DE_LISTA) AS SOMA_PRECO
FROM TABELA_DE_PRODUTOS GROUP BY EMBALAGEM) Z
WHERE Z.SOMA_PRECO <= 80;

/* UNION */

SELECT DISTINCT BAIRRO FROM TABELA_DE_CLIENTES
UNION
SELECT DISTINCT BAIRRO FROM TABELA_DE_VENDEDORES;

SELECT DISTINCT BAIRRO FROM TABELA_DE_CLIENTES
UNION ALL
SELECT DISTINCT BAIRRO FROM TABELA_DE_VENDEDORES;

SELECT DISTINCT BAIRRO AS BAIRRO_CLIENTE FROM TABELA_DE_CLIENTES
UNION ALL
SELECT DISTINCT BAIRRO AS BAIRRO_VENDEDOR FROM TABELA_DE_VENDEDORES;

SELECT DISTINCT BAIRRO AS BAIRRO, 'CLIENTE' AS TIPO FROM TABELA_DE_CLIENTES
UNION
SELECT DISTINCT BAIRRO AS BAIRRO, 'VENDEDOR' AS TIPO FROM TABELA_DE_VENDEDORES;

/* VISÕES */


SELECT Z.EMBALAGEM, Z.SOMA_PRECO FROM
(SELECT EMBALAGEM, SUM(PRECO_DE_LISTA) AS SOMA_PRECO
FROM TABELA_DE_PRODUTOS GROUP BY EMBALAGEM) Z
WHERE Z.SOMA_PRECO <= 80;



SELECT EMBALAGEM, SUM(PRECO_DE_LISTA) AS SOMA_PRECO
FROM TABELA_DE_PRODUTOS GROUP BY EMBALAGEM;

SELECT * FROM VW_EMBALAGENS WHERE SOMA_PRECO <= 80;

SELECT * FROM TABELA_DE_PRODUTOS A
INNER JOIN VW_EMBALAGENS B ON
A.EMBALAGEM = B.EMBALAGEM;


/* COLVERES */


SELECT TO_DATE('12/11/2019', 'DD/MM/YYYY') FROM DUAL;

SELECT TO_DATE('12/11/2019', 'MM/DD/YYYY') FROM DUAL;

SELECT TO_CHAR(SYSDATE, 'MM/DD/YYYY HH12:MM:SS AM') FROM DUAL;

SELECT EXTRACT(MONTH FROM TO_DATE('12/11/2019', 'DD/MM/YYYY')) FROM DUAL;

SELECT EXTRACT(MONTH FROM TO_DATE('12/11/2019', 'MM/DD/YYYY')) FROM DUAL;

SELECT TO_NUMBER('10') + 100 FROM DUAL;

SELECT TO_CHAR(10, '00000') FROM DUAL;

SELECT NVL(10,0) FROM DUAL;

SELECT TABELA_DE_VENDEDORES.NOME AS NOME_VENDEDOR
, TABELA_DE_VENDEDORES.BAIRRO AS BAIRRO_VENDEDOR
, TABELA_DE_CLIENTES.NOME AS NOME_CLIENTE
, TABELA_DE_CLIENTES.BAIRRO AS BAIRRO_CLIENTE
FROM TABELA_DE_VENDEDORES
FULL JOIN TABELA_DE_CLIENTES
ON TABELA_DE_VENDEDORES.BAIRRO = TABELA_DE_CLIENTES.BAIRRO;

SELECT NVL(TABELA_DE_VENDEDORES.NOME, 'Vendedor Vazio') AS NOME_VENDEDOR
, TABELA_DE_VENDEDORES.BAIRRO AS BAIRRO_VENDEDOR
, TABELA_DE_CLIENTES.NOME AS NOME_CLIENTE
, TABELA_DE_CLIENTES.BAIRRO AS BAIRRO_CLIENTE
FROM TABELA_DE_VENDEDORES
FULL JOIN TABELA_DE_CLIENTES
ON TABELA_DE_VENDEDORES.BAIRRO = TABELA_DE_CLIENTES.BAIRRO;

SELECT GREATEST(10,20,15) FROM DUAL;

SELECT * FROM TABELA_DE_CLIENTES;

SELECT VOLUME_DE_COMPRA, LIMITE_DE_CREDITO, 
GREATEST(VOLUME_DE_COMPRA,LIMITE_DE_CREDITO) FROM TABELA_DE_CLIENTES;


/* DATAS */


SELECT SYSDATE FROM DUAL;

SELECT TO_CHAR(SYSDATE, 'YYYY/MM/DD HH:MM:SS') FROM DUAL;

SELECT SYSDATE + 10 FROM DUAL;

SELECT SYSDATE - 10 FROM DUAL;

SELECT MONTHS_BETWEEN(SYSDATE, TO_DATE('2019-01-01','YYYY-MM-DD')) FROM DUAL;

SELECT ADD_MONTHS(SYSDATE, 10) FROM DUAL;

SELECT NEXT_DAY(SYSDATE, 'SEXTA') FROM DUAL;

SELECT LAST_DAY(SYSDATE) FROM DUAL;

SELECT TRUNC(SYSDATE, 'YEAR') FROM DUAL;

SELECT TRUNC(SYSDATE, 'MONTH') FROM DUAL;

SELECT ROUND(SYSDATE, 'YEAR') FROM DUAL;

SELECT ROUND(SYSDATE - 10, 'MONTH') FROM DUAL;

/* CONSULTAS MATEMÁTICAS */

SELECT ROUND(3.4) FROM DUAL;

SELECT ROUND(3.6) FROM DUAL;

SELECT TRUNC(3.4) FROM DUAL;

SELECT TRUNC(3.6) FROM DUAL;

SELECT CEIL(3.4) FROM DUAL;

SELECT CEIL(3.6) FROM DUAL;

SELECT FLOOR(3.4) FROM DUAL;

SELECT FLOOR(3.6) FROM DUAL;

SELECT POWER(10,4) FROM DUAL;

SELECT EXP(10) FROM DUAL;

SELECT SQRT(10) FROM DUAL;

SELECT SQRT(144) FROM DUAL;

SELECT SIGN (10) FROM DUAL;

SELECT ABS(10000) FROM DUAL;

SELECT MOD(10, 6) FROM DUAL;


/* CONSULTA STRING */

SELECT NOME FROM TABELA_DE_CLIENTES;

SELECT NOME, UPPER(NOME) FROM TABELA_DE_CLIENTES;

SELECT NOME, LOWER(NOME) FROM TABELA_DE_CLIENTES;

SELECT NOME_DO_PRODUTO, INITCAP(NOME_DO_PRODUTO) FROM TABELA_DE_PRODUTOS;

SELECT CONCAT(ENDERECO_1, BAIRRO) FROM TABELA_DE_CLIENTES;

SELECT NOME, 'Endereço: ' || ENDERECO_1 || ' ' || BAIRRO || ' ' || CIDADE || ' ' || ESTADO || ', CEP: ' || CEP
FROM TABELA_DE_CLIENTES;

SELECT NOME_DO_PRODUTO, LPAD(NOME_DO_PRODUTO, 60, '*') FROM TABELA_DE_PRODUTOS;

SELECT NOME_DO_PRODUTO, RPAD(NOME_DO_PRODUTO, 60, '*') FROM TABELA_DE_PRODUTOS;

SELECT NOME_DO_PRODUTO, SUBSTR(NOME_DO_PRODUTO,3,5) FROM TABELA_DE_PRODUTOS;

SELECT NOME_DO_PRODUTO, INSTR(NOME_DO_PRODUTO, '-') FROM TABELA_DE_PRODUTOS;

SELECT LTRIM('           AAAAAAA') FROM DUAL;

SELECT RTRIM('AAAAAAA         ') FROM DUAL;

SELECT NOME_DO_PRODUTO, REPLACE(REPLACE(NOME_DO_PRODUTO, 'Litro', 'L'),'Ls','L') FROM TABELA_DE_PRODUTOS;


/* RELATORIOS */


SELECT TP.SABOR, INF.QUANTIDADE FROM ITENS_NOTAS_FISCAIS INF
INNER JOIN TABELA_DE_PRODUTOS TP
ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO;

SELECT TP.SABOR, NF.DATA_VENDA, INF.QUANTIDADE FROM ITENS_NOTAS_FISCAIS INF
INNER JOIN TABELA_DE_PRODUTOS TP
ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
INNER JOIN NOTAS_FISCAIS NF
ON INF.NUMERO = NF.NUMERO;

SELECT TP.SABOR, TO_CHAR(NF.DATA_VENDA, 'YYYY') AS ANO, INF.QUANTIDADE FROM ITENS_NOTAS_FISCAIS INF
INNER JOIN TABELA_DE_PRODUTOS TP
ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
INNER JOIN NOTAS_FISCAIS NF
ON INF.NUMERO = NF.NUMERO;

SELECT TP.SABOR, TO_CHAR(NF.DATA_VENDA, 'YYYY') AS ANO, SUM(INF.QUANTIDADE) AS QUANTIDADE_VENDIDA FROM ITENS_NOTAS_FISCAIS INF
INNER JOIN TABELA_DE_PRODUTOS TP
ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
INNER JOIN NOTAS_FISCAIS NF
ON INF.NUMERO = NF.NUMERO
GROUP BY TP.SABOR, TO_CHAR(NF.DATA_VENDA, 'YYYY');

SELECT TP.SABOR, TO_CHAR(NF.DATA_VENDA, 'YYYY') AS ANO, 
SUM(INF.QUANTIDADE) AS QUANTIDADE_VENDIDA FROM ITENS_NOTAS_FISCAIS INF
INNER JOIN TABELA_DE_PRODUTOS TP
ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
INNER JOIN NOTAS_FISCAIS NF
ON INF.NUMERO = NF.NUMERO
WHERE TO_CHAR(NF.DATA_VENDA, 'YYYY') = '2016'
GROUP BY TP.SABOR, TO_CHAR(NF.DATA_VENDA, 'YYYY');

--- QUARDAR ELA
SELECT TP.SABOR, TO_CHAR(NF.DATA_VENDA, 'YYYY') AS ANO, 
SUM(INF.QUANTIDADE) AS QUANTIDADE_VENDIDA FROM ITENS_NOTAS_FISCAIS INF
INNER JOIN TABELA_DE_PRODUTOS TP
ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
INNER JOIN NOTAS_FISCAIS NF
ON INF.NUMERO = NF.NUMERO
WHERE TO_CHAR(NF.DATA_VENDA, 'YYYY') = '2016'
GROUP BY TP.SABOR, TO_CHAR(NF.DATA_VENDA, 'YYYY')
ORDER BY SUM(INF.QUANTIDADE) DESC;

-- 613309 / TOTAL DE VENDA --> % VENDA DA MANGA
-- 487625 / TOTAL DE VENDA --> % VENDA DA MELANCIA

SELECT TO_CHAR(NF.DATA_VENDA, 'YYYY') AS ANO, 
SUM(INF.QUANTIDADE) AS QUANTIDADE_VENDIDA FROM ITENS_NOTAS_FISCAIS INF
INNER JOIN TABELA_DE_PRODUTOS TP
ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
INNER JOIN NOTAS_FISCAIS NF
ON INF.NUMERO = NF.NUMERO
WHERE TO_CHAR(NF.DATA_VENDA, 'YYYY') = '2016'
GROUP BY TO_CHAR(NF.DATA_VENDA, 'YYYY')
ORDER BY SUM(INF.QUANTIDADE) DESC;

SELECT VENDA_SABOR.SABOR, VENDA_SABOR.ANO, VENDA_SABOR.QUANTIDADE_VENDIDA, 
TOTAL_VENDA.QUANTIDADE_VENDIDA AS TOTAL FROM 
(
SELECT TP.SABOR, TO_CHAR(NF.DATA_VENDA, 'YYYY') AS ANO, 
SUM(INF.QUANTIDADE) AS QUANTIDADE_VENDIDA FROM ITENS_NOTAS_FISCAIS INF
INNER JOIN TABELA_DE_PRODUTOS TP
ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
INNER JOIN NOTAS_FISCAIS NF
ON INF.NUMERO = NF.NUMERO
WHERE TO_CHAR(NF.DATA_VENDA, 'YYYY') = '2016'
GROUP BY TP.SABOR, TO_CHAR(NF.DATA_VENDA, 'YYYY')
ORDER BY SUM(INF.QUANTIDADE) DESC
) VENDA_SABOR
INNER JOIN
(
SELECT TO_CHAR(NF.DATA_VENDA, 'YYYY') AS ANO, 
SUM(INF.QUANTIDADE) AS QUANTIDADE_VENDIDA FROM ITENS_NOTAS_FISCAIS INF
INNER JOIN TABELA_DE_PRODUTOS TP
ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
INNER JOIN NOTAS_FISCAIS NF
ON INF.NUMERO = NF.NUMERO
WHERE TO_CHAR(NF.DATA_VENDA, 'YYYY') = '2016'
GROUP BY TO_CHAR(NF.DATA_VENDA, 'YYYY')
ORDER BY SUM(INF.QUANTIDADE) DESC
) TOTAL_VENDA
ON VENDA_SABOR.ANO = TOTAL_VENDA.ANO;

SELECT VENDA_SABOR.SABOR, VENDA_SABOR.ANO, VENDA_SABOR.QUANTIDADE_VENDIDA, 
TOTAL_VENDA.QUANTIDADE_VENDIDA AS TOTAL,
ROUND(((VENDA_SABOR.QUANTIDADE_VENDIDA/TOTAL_VENDA.QUANTIDADE_VENDIDA)*100),2) AS PARTICIPACAO
FROM 
(
SELECT TP.SABOR, TO_CHAR(NF.DATA_VENDA, 'YYYY') AS ANO, 
SUM(INF.QUANTIDADE) AS QUANTIDADE_VENDIDA FROM ITENS_NOTAS_FISCAIS INF
INNER JOIN TABELA_DE_PRODUTOS TP
ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
INNER JOIN NOTAS_FISCAIS NF
ON INF.NUMERO = NF.NUMERO
WHERE TO_CHAR(NF.DATA_VENDA, 'YYYY') = '2016'
GROUP BY TP.SABOR, TO_CHAR(NF.DATA_VENDA, 'YYYY')
ORDER BY SUM(INF.QUANTIDADE) DESC
) VENDA_SABOR
INNER JOIN
(
SELECT TO_CHAR(NF.DATA_VENDA, 'YYYY') AS ANO, 
SUM(INF.QUANTIDADE) AS QUANTIDADE_VENDIDA FROM ITENS_NOTAS_FISCAIS INF
INNER JOIN TABELA_DE_PRODUTOS TP
ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
INNER JOIN NOTAS_FISCAIS NF
ON INF.NUMERO = NF.NUMERO
WHERE TO_CHAR(NF.DATA_VENDA, 'YYYY') = '2016'
GROUP BY TO_CHAR(NF.DATA_VENDA, 'YYYY')
ORDER BY SUM(INF.QUANTIDADE) DESC
) TOTAL_VENDA
ON VENDA_SABOR.ANO = TOTAL_VENDA.ANO;

SELECT VENDA_SABOR.SABOR, VENDA_SABOR.ANO, VENDA_SABOR.QUANTIDADE_VENDIDA, 
ROUND(((VENDA_SABOR.QUANTIDADE_VENDIDA/TOTAL_VENDA.QUANTIDADE_VENDIDA)*100),2) AS PARTICIPACAO
FROM 
(
SELECT TP.SABOR, TO_CHAR(NF.DATA_VENDA, 'YYYY') AS ANO, 
SUM(INF.QUANTIDADE) AS QUANTIDADE_VENDIDA FROM ITENS_NOTAS_FISCAIS INF
INNER JOIN TABELA_DE_PRODUTOS TP
ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
INNER JOIN NOTAS_FISCAIS NF
ON INF.NUMERO = NF.NUMERO
WHERE TO_CHAR(NF.DATA_VENDA, 'YYYY') = '2016'
GROUP BY TP.SABOR, TO_CHAR(NF.DATA_VENDA, 'YYYY')
ORDER BY SUM(INF.QUANTIDADE) DESC
) VENDA_SABOR
INNER JOIN
(
SELECT TO_CHAR(NF.DATA_VENDA, 'YYYY') AS ANO, 
SUM(INF.QUANTIDADE) AS QUANTIDADE_VENDIDA FROM ITENS_NOTAS_FISCAIS INF
INNER JOIN TABELA_DE_PRODUTOS TP
ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
INNER JOIN NOTAS_FISCAIS NF
ON INF.NUMERO = NF.NUMERO
WHERE TO_CHAR(NF.DATA_VENDA, 'YYYY') = '2016'
GROUP BY TO_CHAR(NF.DATA_VENDA, 'YYYY')
ORDER BY SUM(INF.QUANTIDADE) DESC
) TOTAL_VENDA
ON VENDA_SABOR.ANO = TOTAL_VENDA.ANO;



/* VENDAS VÁLIDAS */
SELECT * FROM NOTAS_FISCAIS NF
INNER JOIN ITENS_NOTAS_FISCAIS INF
ON NF.NUMERO = INF.NUMERO;

SELECT NF.CPF, NF.DATA_VENDA, INF.QUANTIDADE FROM NOTAS_FISCAIS NF
INNER JOIN ITENS_NOTAS_FISCAIS INF
ON NF.NUMERO = INF.NUMERO;

SELECT NF.CPF, TO_CHAR(NF.DATA_VENDA, 'YYYY-MM') AS MES_ANO
, INF.QUANTIDADE FROM NOTAS_FISCAIS NF
INNER JOIN ITENS_NOTAS_FISCAIS INF
ON NF.NUMERO = INF.NUMERO;

SELECT NF.CPF, TO_CHAR(NF.DATA_VENDA, 'YYYY-MM') AS MES_ANO
, SUM(INF.QUANTIDADE) AS VOLUME_VENDIDO FROM NOTAS_FISCAIS NF
INNER JOIN ITENS_NOTAS_FISCAIS INF
ON NF.NUMERO = INF.NUMERO
GROUP BY NF.CPF, TO_CHAR(NF.DATA_VENDA, 'YYYY-MM');

SELECT * FROM TABELA_DE_CLIENTES;

SELECT CPF, NOME, VOLUME_DE_COMPRA FROM TABELA_DE_CLIENTES;

SELECT CADASTRO.CPF, CADASTRO.NOME, VENDAS.MES_ANO, CADASTRO.VOLUME_DE_COMPRA, 
VENDAS.VOLUME_VENDIDO FROM
(SELECT NF.CPF, TO_CHAR(NF.DATA_VENDA, 'YYYY-MM') AS MES_ANO
, SUM(INF.QUANTIDADE) AS VOLUME_VENDIDO FROM NOTAS_FISCAIS NF
INNER JOIN ITENS_NOTAS_FISCAIS INF
ON NF.NUMERO = INF.NUMERO
GROUP BY NF.CPF, TO_CHAR(NF.DATA_VENDA, 'YYYY-MM')) VENDAS
INNER JOIN
(SELECT CPF, NOME, VOLUME_DE_COMPRA FROM TABELA_DE_CLIENTES) CADASTRO
ON VENDAS.CPF = CADASTRO.CPF;

SELECT CADASTRO.CPF, CADASTRO.NOME, VENDAS.MES_ANO, CADASTRO.VOLUME_DE_COMPRA, 
VENDAS.VOLUME_VENDIDO AS VOLUME_LIMITE,
CASE WHEN CADASTRO.VOLUME_DE_COMPRA <= VENDAS.VOLUME_VENDIDO THEN 'Vendas Válidas'
ELSE 'Vendas Inválidas' END AS RESULTADO
FROM
(SELECT NF.CPF, TO_CHAR(NF.DATA_VENDA, 'YYYY-MM') AS MES_ANO
, SUM(INF.QUANTIDADE) AS VOLUME_VENDIDO FROM NOTAS_FISCAIS NF
INNER JOIN ITENS_NOTAS_FISCAIS INF
ON NF.NUMERO = INF.NUMERO
GROUP BY NF.CPF, TO_CHAR(NF.DATA_VENDA, 'YYYY-MM')) VENDAS
INNER JOIN
(SELECT CPF, NOME, VOLUME_DE_COMPRA FROM TABELA_DE_CLIENTES) CADASTRO
ON VENDAS.CPF = CADASTRO.CPF
WHERE VENDAS.MES_ANO = '2018-01';






/* 


CURSO DE SQL PESQUISAS AVANÇADAS NO ORACLE



*/ 